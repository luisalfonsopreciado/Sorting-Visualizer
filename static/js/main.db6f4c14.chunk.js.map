{"version":3,"sources":["components/Navigation/Toolbar/Toolbar.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","App.module.css","components/SortingVisualizer/SortingVisualizer.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","components/Col/Col.jsx","algorithms/BubbleSort.js","algorithms/QuickSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Toolbar/Toolbar.js","UI/Modal/Modal.js","UI/Backdrop/Backdrop.js","components/SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Col","height","className","style","bubbleSort","enteredArray","animation","array","slice","length","last","i","j","push","temp","quickSort","arr","low","high","pi","pivot","partition","insert","rightIndex","value","insertionSort","getMergeSortAnimations","animations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","NavigationItem","children","clicked","classes","onClick","activeClassName","active","NavigationItems","setAlgorithm","reset","executeAlgorithm","toggleShowModal","toolbar","Toolbar","DesktopOnly","animationTiming","enter","exit","Modal","props","Transition","in","show","timeout","mountOnEnter","unmountOnExit","state","join","backdrop","cssClasses","generateRandomArray","max","random","SortingVisualizer","showModal","algorithm","sorted","disabled","setState","onResetHandler","mergeSort","a","arrayBars","document","getElementsByClassName","pivotHeight","body","bodyHeight","small","smallHeight","setTimeout","backgroundColor","prev","next","prevHeight","nextHeight","index","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","this","console","log","Columns","map","key","Container","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db6f4c14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"Logo\":\"Toolbar_Logo__3Lk47\",\"DesktopOnly\":\"Toolbar_DesktopOnly__LuPaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"active\":\"NavigationItem_active__2v2td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__10KOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SortingVisualizer_Container__3IIh9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1fnFX\"};","import React from 'react'\nimport  \"./Col.css\"\nconst Col = ({ height }) => {\n    return (\n        <div className={\"array-bar\"} style={{height}}>\n        </div>\n    )\n}\nexport default Col","export const bubbleSort = (enteredArray) => {\n  const animation = [];\n  const array = enteredArray.slice(0, enteredArray.length);\n  let last = enteredArray.length - 1;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length; j++) {\n      if (j + 1 <= last) {\n        animation.push([j, j + 1, array[j], array[j + 1]]);\n        if (array[j] > array[j + 1]) {\n          let temp = array[j + 1];\n          array[j + 1] = array[j];\n          array[j] = temp;\n          animation.push([j, j + 1, array[j], array[j + 1]]);\n        }\n      } else {\n        last = last - 1;\n        break;\n      }\n  \n    }\n  }\n  return animation;\n};\n","// animation.push({\n//    high,\n//     arr[high],\n//      null,\n//      null,\n//   });\nconst partition = (arr, low, high, animation) => {\n  const pivot = arr[high];\n  \n  let i = low - 1; // index of smaller element\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n     animation.push([high, arr[high], j, arr[j], -1,-1 ]);\n    if (arr[j] < pivot) {\n      i++;\n      // swap arr[i] and arr[j]\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n       animation.push([high, arr[high], j, arr[j] , i , arr[i]]);\n    }\n  }\n\n  // swap arr[i+1] and arr[high] (or pivot)\n  animation.push([high, arr[high], low,arr[low], -1,-1 ]);\n  const temp = arr[i + 1];\n  arr[i + 1] = arr[high];\n  arr[high] = temp;\n  animation.push([high, arr[high], low,arr[low], -1,-1 ]);\n  return i + 1;\n};\n\nexport const quickSort = (arr, low, high, animation) => {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \n          now at right place */\n    const pi = partition(arr, low, high, animation);\n    animation.push([pi, arr[pi], -1, -1, -1,-1 ]);\n    // Recursively sort elements before\n    // partition and after partition\n    quickSort(arr, low, pi - 1, animation);\n    quickSort(arr, pi + 1, high, animation);\n  }\n};\n\n","\nconst insert = (array, rightIndex, value, animation) => {\n    var i;\n    for(i = rightIndex; array[i] > value && i >=0 ; i--){\n            animation.push([i + 1, array[i + 1]])\n            array[i + 1] = array[i];\n        }\n        animation.push([i + 1, value])\n        array[i + 1] = value;\n}\n\nexport const insertionSort = (array) => {\n    const animation = [];\n    for(let i = 1; i < array.length; i++){\n        insert(array, i - 1, array[i], animation)\n    }\n    return animation\n}\n\n","\nexport const sort = (array,l,r) => {\n    if(l < r){\n        let m = (1+r)/2 // find the middle point\n        //Sort First and second Halves\n        sort(array, l, m) \n        sort(array, m+1, r)\n        //Merge the sorted halves\n        merge(m,array.length);\n    }\n}\n\nconst merge = (array, l, m, r) => {\n    //Find sizes of two subarrays to be merged\n    const n1 = m - 1 + 1\n    const n2 = r - m\n\n    //Create temp arrays\n    const L = []\n    const R = []\n   //merge the temp arrays\n    //Initial indexes of first and second subarrays\n    let i,j = 0\n    //Copy data to temp arrays\n    for(let i = 0; i<n1; i++){\n        L[i] = array[l + i]\n    }\n    for(let i = 0; i<n2; i++){\n        R[i] = array[m + 1 + j]\n    }\n\n   \n\n    //Initial index of merged sub array\n    let k = 1\n    while(i < n1 && j < n2){\n        if(L[i] <= R[j]){\n            array[k] = L[i];\n            i++;\n        }else {\n            array[k] = R[j]\n            j++\n        }\n        k++\n    }\n\n    //Copy remaining elements of L[] if any\n    while(i < n1){\n        array[k] = L[i]\n        i++\n        k++\n    }\n\n    //Copy remaining elements of R[] if any\n    while(j < n2){\n        array[k] = R[j]\n        j++\n        k++\n    }\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n","import React from 'react'\nimport classes from './NavigationItem.module.css'\n\nconst NavigationItem = ({children, clicked}) => (\n   <li className={classes.NavigationItem}>\n       <p onClick={() => clicked()}\n            activeClassName={classes.active} >\n            {children}\n        </p>\n    </li>\n)\nexport default NavigationItem","import React from 'react'\nimport classes from './NavigationItems.module.css'\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nconst NavigationItems = ({setAlgorithm, reset, executeAlgorithm, toggleShowModal}) => (\n    <ul className={classes.NavigationItems}>\n        <NavigationItem clicked={toggleShowModal}>SORTING VISUALIZER</NavigationItem>\n        <NavigationItem clicked={() => setAlgorithm(\"mergeSort\")}>Merge Sort</NavigationItem>\n        <NavigationItem clicked={() => setAlgorithm(\"bubbleSort\")}>Bubble Sort</NavigationItem>\n        <NavigationItem clicked={() => setAlgorithm(\"quickSort\")}>Quick Sort</NavigationItem>\n        <NavigationItem clicked={() => setAlgorithm(\"insertionSort\")}>Insertion Sort</NavigationItem>\n        <NavigationItem clicked={() => setAlgorithm(\"heapSort\")}>Heap Sort</NavigationItem>\n        <NavigationItem clicked={reset}>Reset</NavigationItem>\n        <NavigationItem clicked={executeAlgorithm}>GO</NavigationItem>\n    </ul>\n)\nexport default NavigationItems","import React from \"react\";\nimport classes from \"./Toolbar.module.css\";\nimport NavigationItems from \"../NavigationItems/NavigationItems\";\n// import DrawerToggle from \"../SideDrawer/DrawerToggle/DrawerToggle\";\n\nconst toolbar = ({\n  executeAlgorithm,\n  setAlgorithm,\n  reset,\n  toggleShowModal,\n}) => {\n  return (\n    <header className={classes.Toolbar}>\n      {/* <DrawerToggle clicked={drawerToggleClicked} /> */}\n      <nav className={classes.DesktopOnly}>\n        <NavigationItems\n          toggleShowModal={toggleShowModal}\n          executeAlgorithm={executeAlgorithm}\n          setAlgorithm={setAlgorithm}\n          reset={reset}\n        />\n      </nav>\n    </header>\n  );\n};\nexport default toolbar;\n","import React from \"react\";\nimport \"./Modal.css\";\nimport Transition from \"react-transition-group/Transition\";\n\nconst animationTiming = {\n  enter: 400,\n  exit: 400,\n};\n\nconst Modal = (props) => {\n  return (\n    <Transition\n      in={props.show}\n      timeout={animationTiming}\n      mountOnEnter\n      unmountOnExit\n    >\n      {(state) => {\n        const classes = [\n          \"Modal\",\n          state === \"entering\"\n            ? \"ModalOpen\"\n            : state === \"exiting\"\n            ? \"ModalClosed\"\n            : null,\n        ];\n        return (\n          <div className={classes.join(\" \")}>\n            <h1>Welcome to The Sorting Visualizer!</h1>\n            <h4>\n              This Project Helps CS Enthusiasts visualize popular sorting\n              algorithms. To get Started, click on a sorting algorithm located\n              in the header and press GO.\n            </h4>\n            <button onClick={props.clicked}>Dismiss</button>\n          </div>\n        );\n      }}\n    </Transition>\n  );\n};\nexport default Modal;\n","import React from \"react\";\n\nimport \"./Backdrop.css\";\n\nconst backdrop = (props) => {\n  const cssClasses = [\n    \"Backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n  return <div className={cssClasses.join(\" \")}></div>;\n};\n\nexport default backdrop;\n","import React, { Component } from \"react\";\nimport Col from \"../Col/Col\";\nimport classes from \"./SortingVisualizer.module.css\";\nimport { bubbleSort } from \"../../algorithms/BubbleSort\";\nimport { quickSort } from \"../../algorithms/QuickSort\";\nimport { insertionSort } from \"../../algorithms/InsertionSort\";\nimport { getMergeSortAnimations } from \"../../algorithms/MergeSort\";\nimport Toolbar from \"../../components/Navigation/Toolbar/Toolbar\";\nimport Modal from \"../../UI/Modal/Modal\";\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) + 1;\n}\nfunction generateRandomArray(length) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array[i] = getRandomInt(300) * 2.5;\n  }\n  return array;\n}\nconst NUMBER_COLUMNS = 300;\nconst PRIMARY_COLOR = \"turquoise\";\nconst SECONDARY_COLOR = \"green\";\nconst ANIMATION_SPEED_MS = 1;\nclass SortingVisualizer extends Component {\n  state = {\n    showModal: true,\n    algorithm: \"\",\n    array: [],\n    sorted: false,\n    disabled: false,\n  };\n  componentDidMount() {\n    this.onResetHandler();\n  }\n  toggleShowModal = () => {\n    this.setState({ showModal: !this.state.showModal });\n  };\n  setAlgorithm = (algorithm) => {\n    this.setState({ algorithm: algorithm });\n  };\n  executeAlgorithm = () => {\n    if(this.state.sorted){\n      this.onResetHandler()\n    }\n    if (!this.state.disabled) { \n      this.setState({ sorted: true , disabled: true,});\n      switch (this.state.algorithm) {\n        case \"bubbleSort\":\n          this.bubbleSort();\n          break;\n        case \"mergeSort\":\n          this.mergeSort();\n          break;\n        case \"quickSort\":\n          this.quickSort();\n          break;\n        case \"heapSort\":\n          this.mergeSort();\n          break;\n        case \"insertionSort\":\n          this.insertionSort();\n          break;\n        default:\n          this.quickSort();\n          break;\n      }\n    }\n  };\n  quickSort = async () => {\n    const array = this.state.array.slice(0, this.state.array.length);\n    const animation = [];\n\n    quickSort(array, 0, array.length - 1, animation);\n    this.setState({ disabled: true });\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animation.length; i++) {\n      const [\n        pivot,\n        pivotHeight,\n        body,\n        bodyHeight,\n        small,\n        smallHeight,\n      ] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[pivot].style.height = `${pivotHeight}px`;\n        arrayBars[pivot].style.backgroundColor = \"pink\";\n        if (body !== -1) {\n          arrayBars[body].style.backgroundColor = \"turqoise\";\n          arrayBars[body].style.height = `${bodyHeight}px`;\n        }\n        if (small !== -1) {\n          arrayBars[small].style.backgroundColor = \"turqoise\";\n          arrayBars[small].style.height = `${smallHeight}px`;\n        }\n        if (i === animation.length - 1) {\n          this.setState({ disabled: false });\n        }\n      }, i * 1);\n    }\n  };\n  bubbleSort = async () => {\n    let array = this.state.array;\n    const animation = bubbleSort(array);\n    this.setState({ array, disabled: true });\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animation.length; i++) {\n      const [prev, next, prevHeight, nextHeight] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[prev].style.backgroundColor = \"turquoise\";\n        arrayBars[next].style.backgroundColor = \"green\";\n        if (nextHeight || prevHeight) {\n          arrayBars[prev].style.height = `${prevHeight}px`;\n          arrayBars[next].style.height = `${nextHeight}px`;\n        }\n        if (i === animation.length - 1) {\n          this.setState({ disabled: false });\n        }\n      }, i * 0.1);\n    }\n  };\n  insertionSort = async () => {\n    let array = this.state.array;\n    const animation = insertionSort(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animation.length; i++) {\n      const [index, height] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[index].style.backgroundColor = \"red\";\n        arrayBars[index].style.height = `${height}px`;\n        if (i === animation.length - 1) {\n          this.setState({ disabled: false });\n        }\n      }, i * 0.5);\n    }\n  };\n  mergeSort = async () => {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (i === animations.length - 1) {\n            this.setState({ disabled: false });\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n  onResetHandler = () => {\n    const array = generateRandomArray(NUMBER_COLUMNS);\n    if(!this.state.disabled){\n      this.setState({ array, sorted: false , disabled: false});\n    }\n    \n  };\n  render() {\n    console.log(this.state.algorithm);\n    let Columns = this.state.array.map((value, key) => (\n      <Col key={key} height={value} />\n    ));\n\n    return (\n      <div classes={classes.Container}>\n        <Toolbar\n          toggleShowModal={this.toggleShowModal}\n          executeAlgorithm={this.executeAlgorithm}\n          setAlgorithm={this.setAlgorithm}\n          reset={this.onResetHandler}\n        ></Toolbar>\n        {Columns}\n        {this.state.showModal ? <Backdrop show={this.state.showModal} /> : null}\n        {this.state.showModal ? (\n          <Modal clicked={this.toggleShowModal} show={this.state.showModal} />\n        ) : null}\n      </div>\n    );\n  }\n}\nexport default SortingVisualizer;\n","import React from 'react';\nimport classes from './App.module.css';\nimport SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\"\nfunction App() {\n  return (\n      <div className={classes.Container}>\n        <SortingVisualizer/>\n      </div>\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}