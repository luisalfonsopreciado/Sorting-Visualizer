{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","App.module.css","components/Navigation/Toolbar/Toolbar.module.css","components/SortingVisualizer/SortingVisualizer.module.css","components/Col/Col.jsx","algorithms/QuickSort.js","utility/constants.js","animations/QuickSort.js","algorithms/BubbleSort.js","animations/BubbleSort.js","algorithms/InsertionSort.js","animations/InsertionSort.js","algorithms/MergeSort.js","animations/MergeSort.js","utility/sortData.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/Dropdown/DropDown.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Toolbar/Toolbar.js","components/SortingVisualizer/SortingVisualizer.js","utility/index.js","components/UI/Backdrop/Backdrop.js","components/UI/CustomDialog/CustomDialog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Col","height","className","style","quickSort","arr","low","high","animation","pi","pivot","i","j","push","swap","partition","temp","PRIMARY_COLOR","quickSortAnimation","array","setIsDisabled","a","copy","slice","length","arrayBars","document","getElementsByClassName","pivotHeight","body","bodyHeight","small","smallHeight","setTimeout","backgroundColor","bubbleSort","enteredArray","last","bubbleSortAnimation","animations","prev","next","prevHeight","nextHeight","cts","insert","rightIndex","value","insertionSort","console","log","insertionSortAnimation","index","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","mergeSortAnimation","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","sortData","description","NavigationItem","children","clicked","classes","onClick","Btn","DropDown","moreInfo","class","NavigationItems","setAlgorithm","reset","executeAlgorithm","toggleShowModal","algorithm","openInfo","toolbar","props","Toolbar","SortingVisualizer","openModal","useState","setArray","isSorted","setIsSorted","isDisabled","onResetHandler","max","random","generateRandomArray","useEffect","Columns","map","key","styles","ColumnContainer","marginTop","backdrop","cssClasses","show","join","CustomDialog","isOpen","handleClose","title","subtitle","howToPlay","Dialog","fullWidth","maxWidth","open","onclose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","App","setIsOpen","infoOpen","setInfoOpen","type","setType","handleDialogOpen","customDialog","Paper","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77901c10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"Btn\":\"NavigationItem_Btn__3xhRr\",\"navbar\":\"NavigationItem_navbar__2rE4b\",\"NavigationItem-content\":\"NavigationItem_NavigationItem-content__2c_Zw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__10KOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"dropdown\":\"Toolbar_dropdown__3LTS7\",\"dropbtn\":\"Toolbar_dropbtn__30BvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColumnContainer\":\"SortingVisualizer_ColumnContainer__16BCK\"};","import React from \"react\";\nimport \"./Col.css\";\nconst Col = ({ height }) => (\n  <div className={\"array-bar\"} style={{ height }}></div>\n);\n\nexport default Col;\n","const partition = (arr, low, high, animation) => {\n  const pivot = arr[high];\n\n  let i = low - 1; // index of smaller element\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n    animation.push([high, arr[high], j, arr[j], -1, -1]);\n    if (arr[j] < pivot) {\n      i++;\n      // swap arr[i] and arr[j]\n      swap(arr, i, j);\n      animation.push([high, arr[high], j, arr[j], i, arr[i]]);\n    }\n  }\n\n  // swap arr[i+1] and arr[high] (or pivot)\n  animation.push([high, arr[high], low, arr[low], -1, -1]);\n\n  swap(arr, i + 1, high);\n  \n  animation.push([high, arr[high], low, arr[low], -1, -1]);\n  return i + 1;\n};\n\nexport const quickSort = (arr, low, high, animation) => {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \n          now at right place */\n    const pi = partition(arr, low, high, animation);\n    animation.push([pi, arr[pi], -1, -1, -1, -1]);\n    // Recursively sort elements before\n    // partition and after partition\n    quickSort(arr, low, pi - 1, animation);\n    quickSort(arr, pi + 1, high, animation);\n  }\n};\n\nconst swap = (arr, i, j) => {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n","export const MERGE_SORT = \"Merge Sort\"\nexport const BUBBLE_SORT = \"Bubble Sort\"\nexport const QUICK_SORT = \"Quick Sort\"\nexport const INSERTION_SORT = \"Insertion Sort\"\nexport const HEAP_SORT = \"Heap Sort\"\n\n\nexport const NUMBER_COLUMNS = 250;\nexport const PRIMARY_COLOR = \"rgb(57, 86, 218)\";\nexport const SECONDARY_COLOR = \"green\";\nexport const ANIMATION_SPEED_MS = 1;\n\n","import { quickSort } from \"../algorithms/QuickSort\";\nimport {PRIMARY_COLOR, ANIMATION_SPEED_MS} from \"../utility/constants\"\n\nexport const quickSortAnimation = async (array, setIsDisabled) => {\n    const copy = array.slice(0, array.length);\n    const animation = [];\n    quickSort(copy, 0, copy.length - 1, animation);\n    setIsDisabled(true);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animation.length; i++) {\n      const [\n        pivot,\n        pivotHeight,\n        body,\n        bodyHeight,\n        small,\n        smallHeight,\n      ] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[pivot].style.height = `${pivotHeight}px`;\n        arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n        if (body !== -1) {\n          arrayBars[body].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[body].style.height = `${bodyHeight}px`;\n        }\n        if (small !== -1) {\n          arrayBars[small].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[small].style.height = `${smallHeight}px`;\n        }\n        if (i === animation.length - 1) {\n          setIsDisabled(false);\n        }\n      }, i * ANIMATION_SPEED_MS);\n    }\n}","export const bubbleSort = (enteredArray, animation) => {\n  const array = enteredArray.slice(0, enteredArray.length);\n  let last = enteredArray.length - 1;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length; j++) {\n      if (j + 1 <= last) {\n        animation.push([j, j + 1, array[j], array[j + 1]]);\n        if (array[j] > array[j + 1]) {\n          let temp = array[j + 1];\n          array[j + 1] = array[j];\n          array[j] = temp;\n          animation.push([j, j + 1, array[j], array[j + 1]]);\n        }\n      } else {\n        last = last - 1;\n        break;\n      }\n  \n    }\n  }\n  return animation;\n};\n","import { bubbleSort } from \"../algorithms/BubbleSort\";\nimport * as cts from \"../utility/constants\";\n\nexport const bubbleSortAnimation = async (array, setIsDisabled) => {\n  const animations = [];\n  bubbleSort(array, animations);\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n  for (let i = 0; i < animations.length; i++) {\n    const [prev, next, prevHeight, nextHeight] = animations[i];\n\n    setTimeout(() => {\n      arrayBars[prev].style.backgroundColor = cts.PRIMARY_COLOR;\n      arrayBars[next].style.backgroundColor = cts.PRIMARY_COLOR;\n      if (nextHeight || prevHeight) {\n        arrayBars[prev].style.height = `${prevHeight}px`;\n        arrayBars[next].style.height = `${nextHeight}px`;\n      }\n      if (i === animations.length - 1) {\n        setIsDisabled(false);\n      }\n    }, (i * cts.ANIMATION_SPEED_MS) / 10);\n  }\n};\n","const insert = (array, rightIndex, value, animation) => {\n  var i;\n  for (i = rightIndex; array[i] > value && i >= 0; i--) {\n    animation.push([i + 1, array[i]]);\n    array[i + 1] = array[i];\n  }\n\n  array[i + 1] = value;\n  animation.push([i + 1, value]);\n};\n\nexport const insertionSort = (array, animation) => {\n  for (let i = 1; i < array.length; i++) {\n    insert(array, i - 1, array[i], animation);\n  }\n  console.log(array)\n  return animation;\n};\n","import { insertionSort } from \"../algorithms/InsertionSort\";\nimport { PRIMARY_COLOR, ANIMATION_SPEED_MS} from\"../utility/constants\";\n\nexport const insertionSortAnimation = async (array, setIsDisabled) => {\n  const copy = array.slice(0, array.length);\n  const animation = [];\n  insertionSort(copy, animation);\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n  for (let i = 0; i < animation.length; i++) {\n    const [index, height] = animation[i];\n    setTimeout(() => {\n      arrayBars[index].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[index].style.height = `${height}px`;\n      if (i === animation.length - 1) {\n        setIsDisabled(false);\n      }\n    }, (i * ANIMATION_SPEED_MS) / 2);\n  }\n};\n","\nexport const sort = (array,l,r) => {\n    if(l < r){\n        let m = (1+r)/2 // find the middle point\n        //Sort First and second Halves\n        sort(array, l, m) \n        sort(array, m+1, r)\n        //Merge the sorted halves\n        merge(m,array.length);\n    }\n}\n\nconst merge = (array, l, m, r) => {\n    //Find sizes of two subarrays to be merged\n    const n1 = m - 1 + 1\n    const n2 = r - m\n\n    //Create temp arrays\n    const L = []\n    const R = []\n   //merge the temp arrays\n    //Initial indexes of first and second subarrays\n    let i,j = 0\n    //Copy data to temp arrays\n    for(let i = 0; i<n1; i++){\n        L[i] = array[l + i]\n    }\n    for(let i = 0; i<n2; i++){\n        R[i] = array[m + 1 + j]\n    }\n\n   \n\n    //Initial index of merged sub array\n    let k = 1\n    while(i < n1 && j < n2){\n        if(L[i] <= R[j]){\n            array[k] = L[i];\n            i++;\n        }else {\n            array[k] = R[j]\n            j++\n        }\n        k++\n    }\n\n    //Copy remaining elements of L[] if any\n    while(i < n1){\n        array[k] = L[i]\n        i++\n        k++\n    }\n\n    //Copy remaining elements of R[] if any\n    while(j < n2){\n        array[k] = R[j]\n        j++\n        k++\n    }\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n","import { getMergeSortAnimations } from \"../algorithms/MergeSort\";\nimport { PRIMARY_COLOR, ANIMATION_SPEED_MS, SECONDARY_COLOR } from \"../utility/constants\";\n\nexport const mergeSortAnimation = async (array, setIsDisabled) => {\n  const copy = array.slice(0, array.length);\n  const animations = getMergeSortAnimations(copy);\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n  for (let i = 0; i < animations.length; i++) {\n    const isColorChange = i % 3 !== 2;\n    if (isColorChange) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n      }, i * ANIMATION_SPEED_MS);\n    } else {\n      setTimeout(() => {\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}px`;\n        if (i === animations.length - 1) {\n          setIsDisabled(false);\n        }\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n};\n","import * as cts from \"./index\";\nexport const sortData = {};\n\nsortData[cts.MERGE_SORT] = {\n  description:\n    \"Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves\",\n};\n\nsortData[cts.BUBBLE_SORT] = {\n  description: \"Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\",\n};\n\nsortData[cts.QUICK_SORT] = {\n  description: \"QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot.\",\n};\n\nsortData[cts.HEAP_SORT] = {\n  description: \"Heap sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for remaining element.\",\n};\n\nsortData[cts.INSERTION_SORT] = {\n  description: \"Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands.\",\n};\n","import React from \"react\";\nimport classes from \"./NavigationItem.module.css\";\n\nconst NavigationItem = ({ children, clicked }) => (\n  <div className={classes.NavigationItem}>\n    <button onClick={clicked} className={classes.Btn}>\n      {children}\n    </button>\n  </div>\n);\nexport default NavigationItem;\n","import React from \"react\";\nimport \"./DropDown.css\";\n\nconst DropDown = ({ children, clicked, moreInfo }) => {\n  return (\n    <div class=\"dropdown\">\n      <button class=\"dropbtn\">\n        {children}\n      </button>\n      <div class=\"dropdown-content\">\n        <p onClick={clicked}>Select</p>\n        <p onClick={moreInfo}>More Info</p>\n      </div>\n    </div>\n  );\n};\n\nexport default DropDown;\n","import React from \"react\";\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\nimport * as cts from \"../../../utility\";\nimport DropDown from \"./Dropdown/DropDown\";\n\nconst NavigationItems = ({\n  setAlgorithm,\n  reset,\n  executeAlgorithm,\n  toggleShowModal,\n  algorithm,\n  openInfo,\n}) => (\n  <>\n    <NavigationItem clicked={toggleShowModal}>\n      SORTING VISUALIZER\n    </NavigationItem>\n    <DropDown\n      clicked={() => setAlgorithm(cts.MERGE_SORT)}\n      moreInfo={() => openInfo(cts.MERGE_SORT)}\n    >\n      Merge Sort\n    </DropDown>\n    <DropDown\n      clicked={() => setAlgorithm(cts.BUBBLE_SORT)}\n      moreInfo={() => openInfo(cts.BUBBLE_SORT)}\n    >\n      Bubble Sort\n    </DropDown>\n    <DropDown\n      clicked={() => setAlgorithm(cts.QUICK_SORT)}\n      moreInfo={() => openInfo(cts.QUICK_SORT)}\n    >\n      Quick Sort\n    </DropDown>\n    <DropDown\n      clicked={() => setAlgorithm(cts.INSERTION_SORT)}\n      moreInfo={() => openInfo(cts.INSERTION_SORT)}\n    >\n      Insertion Sort\n    </DropDown>\n    <DropDown\n      clicked={() => setAlgorithm(cts.HEAP_SORT)}\n      moreInfo={() => openInfo(cts.HEAP_SORT)}\n    >\n      Heap Sort\n    </DropDown>\n    <NavigationItem clicked={reset}>Reset</NavigationItem>\n    <NavigationItem clicked={executeAlgorithm}>\n      Visualize {algorithm}!\n    </NavigationItem>\n  </>\n);\nexport default NavigationItems;\n","import React from \"react\";\nimport classes from \"./Toolbar.module.css\";\nimport NavigationItems from \"../NavigationItems/NavigationItems\";\n\nconst toolbar = (props) => {\n  return (\n    <header className={classes.Toolbar}>\n        <NavigationItems {...props} />\n    </header>\n  );\n};\nexport default toolbar;\n","import React, { useState, useEffect } from \"react\";\nimport Col from \"../Col/Col\";\nimport * as animations from \"../../animations\";\nimport * as cts from \"../../utility\";\nimport { generateRandomArray } from \"../../utility\";\nimport Toolbar from \"../../components/Navigation/Toolbar/Toolbar\";\nimport styles from \"./SortingVisualizer.module.css\";\n\nconst SortingVisualizer = ({ openModal, openInfo }) => {\n  const [algorithm, setAlgorithm] = useState(cts.QUICK_SORT);\n  const [array, setArray] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const onResetHandler = () => {\n    const array = generateRandomArray(cts.NUMBER_COLUMNS);\n    if (!isDisabled) {\n      setArray(array);\n      setIsSorted(false);\n      setIsDisabled(false);\n    }\n  };\n\n  useEffect(() => {\n    onResetHandler();\n  }, []);\n\n  const executeAlgorithm = () => {\n    if (isSorted) {\n      onResetHandler();\n    }\n    if (!isDisabled) {\n      setIsSorted(true);\n      setIsDisabled(true);\n\n      switch (algorithm) {\n        case cts.BUBBLE_SORT:\n          animations.bubbleSortAnimation(array, setIsDisabled);\n          break;\n        case cts.MERGE_SORT:\n          animations.mergeSortAnimation(array, setIsDisabled);\n          break;\n        case cts.QUICK_SORT:\n          animations.quickSortAnimation(array, setIsDisabled);\n          break;\n        case cts.HEAP_SORT:\n          animations.mergeSortAnimation(array, setIsDisabled);\n          break;\n        case cts.INSERTION_SORT:\n          animations.insertionSortAnimation(array, setIsDisabled);\n          break;\n        default:\n          animations.quickSortAnimation(array, setIsDisabled);\n          break;\n      }\n    }\n  };\n\n  let Columns = array.map((value, key) => <Col key={key} height={value} />);\n\n  return (\n    <div className={styles.ColumnContainer}>\n      <Toolbar\n        toggleShowModal={openModal}\n        executeAlgorithm={executeAlgorithm}\n        setAlgorithm={setAlgorithm}\n        reset={onResetHandler}\n        algorithm={algorithm}\n        openInfo={openInfo}\n      />\n      <div style={{marginTop: \"30px\"}}>{Columns}</div>\n      \n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","export * from \"./constants\"\nexport * from \"./sortData\"\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max)) + 1;\n};\nexport const generateRandomArray = (length) => {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array[i] = getRandomInt(220) * 2.5;\n  }\n  return array;\n};\n","import React from \"react\";\nimport \"./Backdrop.css\";\n\nconst backdrop = (props) => {\n  const cssClasses = [\n    \"Backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n  return <div className={cssClasses.join(\" \")}></div>;\n};\n\nexport default backdrop;\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport Backdrop from \"../Backdrop/Backdrop\";\n\nexport const CustomDialog = ({\n  isOpen,\n  handleClose,\n  title,\n  subtitle,\n  children,\n  howToPlay,\n}) => {\n  return (\n    <>\n      <Dialog\n        fullWidth\n        maxWidth=\"md\"\n        open={isOpen}\n        onclose={handleClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{subtitle}</DialogContentText>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          {howToPlay && (\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                handleClose();\n                howToPlay();\n              }}\n            >\n              How to Play\n            </Button>\n          )}\n\n          <Button onClick={handleClose} color=\"secondary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Backdrop show={isOpen} />\n    </>\n  );\n};\n\nCustomDialog.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n","import React, { useEffect, useState } from \"react\";\nimport classes from \"./App.module.css\";\nimport SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\";\nimport { CustomDialog } from \"./components/UI/CustomDialog/CustomDialog\";\nimport Paper from \"@material-ui/core/Paper\";\nimport * as cts from \"./utility/index\"\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(\"\");\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [type, setType] = useState(cts.MERGE_SORT);\n\n  useEffect(() => {\n    handleDialogOpen();\n  }, []);\n  const handleDialogOpen = () => {\n    setIsOpen(true);\n  };\n  const handleDialogClose = () => {\n    setIsOpen(false);\n  };\n  const handleInfoOpen = (type) => {\n    setType(type);\n    setInfoOpen(true);\n  };\n  const handleInfoClose = () => {\n    setInfoOpen(false);\n  };\n  return (\n    <>\n      <SortingVisualizer\n        openModal={handleDialogOpen}\n        openInfo={handleInfoOpen}\n      />\n      <CustomDialog\n        isOpen={isOpen}\n        handleClose={handleDialogClose}\n        className={classes.customDialog}\n      >\n        <Paper>\n          <h1>Welcome to The Sorting Visualizer!</h1>\n          <h4>\n            This Project Helps CS Enthusiasts visualize popular sorting\n            algorithms. To get Started, click on a sorting algorithm located in\n            the header and press GO.\n          </h4>\n          <p>For a better Experience, Use use browser to full width</p>\n        </Paper>\n      </CustomDialog>\n      <CustomDialog isOpen={infoOpen} handleClose={handleInfoClose}>\n        <h1>{type}</h1>\n        <p>{cts.sortData[type].description}</p>\n      </CustomDialog>\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}