{"version":3,"sources":["components/Navigation/Toolbar/Toolbar.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","App.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","components/SortingVisualizer/SortingVisualizer.module.css","components/hoc/withClass.js","components/Col/Col.jsx","algorithms/QuickSort.js","animations/QuickSort.js","utility/constants.js","algorithms/BubbleSort.js","animations/BubbleSort.js","algorithms/InsertionSort.js","animations/InsertionSort.js","algorithms/MergeSort.js","animations/MergeSort.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Toolbar/Toolbar.js","UI/Modal/Modal.js","UI/Backdrop/Backdrop.js","App.js","components/SortingVisualizer/SortingVisualizer.js","utility/index.js","serviceWorker.js","index.js"],"names":["module","exports","withClass","WrappedComponent","className","props","Col","height","style","quickSort","arr","low","high","animation","pi","pivot","i","j","push","temp","partition","quickSortAnimation","array","setIsDisabled","a","copy","slice","length","arrayBars","document","getElementsByClassName","pivotHeight","body","bodyHeight","small","smallHeight","setTimeout","backgroundColor","bubbleSort","enteredArray","last","bubbleSortAnimation","prev","next","prevHeight","nextHeight","insert","rightIndex","value","insertionSort","insertionSortAnimation","index","getMergeSortAnimations","animations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","mergeSortAnimation","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","NavigationItem","children","clicked","classes","onClick","activeClassName","active","NavigationItems","setAlgorithm","reset","executeAlgorithm","toggleShowModal","algorithm","toolbar","Toolbar","DesktopOnly","animationTiming","enter","exit","Modal","Transition","in","show","timeout","mountOnEnter","unmountOnExit","state","join","backdrop","cssClasses","useState","showModal","setShowModal","setArray","isSorted","setIsSorted","isDisabled","onResetHandler","max","random","generateRandomArray","useEffect","Columns","map","key","styles","ColumnContainer","Container","Boolean","window","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aae80ffe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"Logo\":\"Toolbar_Logo__3Lk47\",\"DesktopOnly\":\"Toolbar_DesktopOnly__LuPaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"active\":\"NavigationItem_active__2v2td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__10KOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1fnFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SortingVisualizer_Container__3IIh9\",\"ColumnContainer\":\"SortingVisualizer_ColumnContainer__16BCK\"};","import React from 'react'\n\nconst withClass = (WrappedComponent, className) => {\n    return props => (\n        <div className={className} >\n            <WrappedComponent {...props}/>\n        </div>\n    )\n}\nexport default withClass","import React from \"react\";\nimport \"./Col.css\";\nconst Col = ({ height }) => (\n  <div className={\"array-bar\"} style={{ height }}></div>\n);\n\nexport default Col;\n","// animation.push({\n//    high,\n//     arr[high],\n//      null,\n//      null,\n//   });\nconst partition = (arr, low, high, animation) => {\n  const pivot = arr[high];\n  \n  let i = low - 1; // index of smaller element\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n     animation.push([high, arr[high], j, arr[j], -1,-1 ]);\n    if (arr[j] < pivot) {\n      i++;\n      // swap arr[i] and arr[j]\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n       animation.push([high, arr[high], j, arr[j] , i , arr[i]]);\n    }\n  }\n\n  // swap arr[i+1] and arr[high] (or pivot)\n  animation.push([high, arr[high], low,arr[low], -1,-1 ]);\n  const temp = arr[i + 1];\n  arr[i + 1] = arr[high];\n  arr[high] = temp;\n  animation.push([high, arr[high], low,arr[low], -1,-1 ]);\n  return i + 1;\n};\n\nexport const quickSort = (arr, low, high, animation) => {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \n          now at right place */\n    const pi = partition(arr, low, high, animation);\n    animation.push([pi, arr[pi], -1, -1, -1,-1 ]);\n    // Recursively sort elements before\n    // partition and after partition\n    quickSort(arr, low, pi - 1, animation);\n    quickSort(arr, pi + 1, high, animation);\n  }\n};\n\n","import { quickSort } from \"../algorithms/QuickSort\";\nimport {PRIMARY_COLOR, ANIMATION_SPEED_MS} from \"../utility/constants\"\n\nexport const quickSortAnimation = async (array, setIsDisabled) => {\n    const copy = array.slice(0, array.length);\n    const animation = [];\n    quickSort(copy, 0, copy.length - 1, animation);\n    setIsDisabled(true);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animation.length; i++) {\n      const [\n        pivot,\n        pivotHeight,\n        body,\n        bodyHeight,\n        small,\n        smallHeight,\n      ] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[pivot].style.height = `${pivotHeight}px`;\n        arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n        if (body !== -1) {\n          arrayBars[body].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[body].style.height = `${bodyHeight}px`;\n        }\n        if (small !== -1) {\n          arrayBars[small].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[small].style.height = `${smallHeight}px`;\n        }\n        if (i === animation.length - 1) {\n          setIsDisabled(false);\n        }\n      }, i * ANIMATION_SPEED_MS);\n    }\n}","export const MERGE_SORT = \"Merge Sort\"\nexport const BUBBLE_SORT = \"Bubble Sort\"\nexport const QUICK_SORT = \"Quick Sort\"\nexport const INSERTION_SORT = \"Insertion Sort\"\nexport const HEAP_SORT = \"Heap Sort\"\n\n\nexport const NUMBER_COLUMNS = 250;\nexport const PRIMARY_COLOR = \"rgb(57, 86, 218)\";\nexport const SECONDARY_COLOR = \"green\";\nexport const ANIMATION_SPEED_MS = 1;\n","export const bubbleSort = (enteredArray) => {\n  const animation = [];\n  const array = enteredArray.slice(0, enteredArray.length);\n  let last = enteredArray.length - 1;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length; j++) {\n      if (j + 1 <= last) {\n        animation.push([j, j + 1, array[j], array[j + 1]]);\n        if (array[j] > array[j + 1]) {\n          let temp = array[j + 1];\n          array[j + 1] = array[j];\n          array[j] = temp;\n          animation.push([j, j + 1, array[j], array[j + 1]]);\n        }\n      } else {\n        last = last - 1;\n        break;\n      }\n  \n    }\n  }\n  return animation;\n};\n","import { bubbleSort } from \"../algorithms/BubbleSort\";\nimport {PRIMARY_COLOR, ANIMATION_SPEED_MS, SECONDARY_COLOR} from \"../utility/constants\"\n\nexport const bubbleSortAnimation = async (array, setIsDisabled) => {\n    const animation = bubbleSort(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animation.length; i++) {\n      const [prev, next, prevHeight, nextHeight] = animation[i];\n\n      setTimeout(() => {\n        arrayBars[prev].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[next].style.backgroundColor = SECONDARY_COLOR;\n        if (nextHeight || prevHeight) {\n          arrayBars[prev].style.height = `${prevHeight}px`;\n          arrayBars[next].style.height = `${nextHeight}px`;\n        }\n        if (i === animation.length - 1) {\n          setIsDisabled(false);\n        }\n      }, (i * ANIMATION_SPEED_MS) / 10);\n    }\n  };","\nconst insert = (array, rightIndex, value, animation) => {\n    var i;\n    for(i = rightIndex; array[i] > value && i >=0 ; i--){\n            animation.push([i + 1, array[i + 1]])\n            array[i + 1] = array[i];\n        }\n        \n        array[i + 1] = value;\n        animation.push([i + 1, value])\n}\n\nexport const insertionSort = (array) => {\n    const animation = [];\n    for(let i = 1; i < array.length; i++){\n        insert(array, i - 1, array[i], animation)\n    }\n    return animation\n}\n\n","import { insertionSort } from \"../algorithms/InsertionSort\";\nimport { PRIMARY_COLOR, ANIMATION_SPEED_MS} from\"../utility/constants\";\n\nexport const insertionSortAnimation = async (array, setIsDisabled) => {\n  const copy = array.slice(0, array.length);\n  const animation = insertionSort(copy);\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n  for (let i = 0; i < animation.length; i++) {\n    const [index, height] = animation[i];\n    setTimeout(() => {\n      arrayBars[index].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[index].style.height = `${height}px`;\n      if (i === animation.length - 1) {\n        setIsDisabled(false);\n      }\n    }, (i * ANIMATION_SPEED_MS) / 2);\n  }\n};\n","\nexport const sort = (array,l,r) => {\n    if(l < r){\n        let m = (1+r)/2 // find the middle point\n        //Sort First and second Halves\n        sort(array, l, m) \n        sort(array, m+1, r)\n        //Merge the sorted halves\n        merge(m,array.length);\n    }\n}\n\nconst merge = (array, l, m, r) => {\n    //Find sizes of two subarrays to be merged\n    const n1 = m - 1 + 1\n    const n2 = r - m\n\n    //Create temp arrays\n    const L = []\n    const R = []\n   //merge the temp arrays\n    //Initial indexes of first and second subarrays\n    let i,j = 0\n    //Copy data to temp arrays\n    for(let i = 0; i<n1; i++){\n        L[i] = array[l + i]\n    }\n    for(let i = 0; i<n2; i++){\n        R[i] = array[m + 1 + j]\n    }\n\n   \n\n    //Initial index of merged sub array\n    let k = 1\n    while(i < n1 && j < n2){\n        if(L[i] <= R[j]){\n            array[k] = L[i];\n            i++;\n        }else {\n            array[k] = R[j]\n            j++\n        }\n        k++\n    }\n\n    //Copy remaining elements of L[] if any\n    while(i < n1){\n        array[k] = L[i]\n        i++\n        k++\n    }\n\n    //Copy remaining elements of R[] if any\n    while(j < n2){\n        array[k] = R[j]\n        j++\n        k++\n    }\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n","import { getMergeSortAnimations } from \"../algorithms/MergeSort\";\nimport { PRIMARY_COLOR, ANIMATION_SPEED_MS, SECONDARY_COLOR } from \"../utility/constants\";\n\nexport const mergeSortAnimation = async (array, setIsDisabled) => {\n  const copy = array.slice(0, array.length);\n  const animations = getMergeSortAnimations(copy);\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n  for (let i = 0; i < animations.length; i++) {\n    const isColorChange = i % 3 !== 2;\n    if (isColorChange) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n      }, i * ANIMATION_SPEED_MS);\n    } else {\n      setTimeout(() => {\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}px`;\n        if (i === animations.length - 1) {\n          setIsDisabled(false);\n        }\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n};\n","import React from 'react'\nimport classes from './NavigationItem.module.css'\n\nconst NavigationItem = ({children, clicked}) => (\n   <li className={classes.NavigationItem}>\n       <p onClick={() => clicked()}\n            activeClassName={classes.active} >\n            {children}\n        </p>\n    </li>\n)\nexport default NavigationItem","import React from \"react\";\nimport classes from \"./NavigationItems.module.css\";\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\nimport * as cts from \"../../../utility\";\n\nconst NavigationItems = ({\n  setAlgorithm,\n  reset,\n  executeAlgorithm,\n  toggleShowModal,\n  algorithm,\n}) => (\n  <ul className={classes.NavigationItems}>\n    <NavigationItem clicked={toggleShowModal}>\n      SORTING VISUALIZER\n    </NavigationItem>\n    <NavigationItem clicked={() => setAlgorithm(cts.MERGE_SORT)}>\n      Merge Sort\n    </NavigationItem>\n    <NavigationItem clicked={() => setAlgorithm(cts.BUBBLE_SORT)}>\n      Bubble Sort\n    </NavigationItem>\n    <NavigationItem clicked={() => setAlgorithm(cts.QUICK_SORT)}>\n      Quick Sort\n    </NavigationItem>\n    <NavigationItem clicked={() => setAlgorithm(cts.INSERTION_SORT)}>\n      Insertion Sort\n    </NavigationItem>\n    <NavigationItem clicked={() => setAlgorithm(cts.HEAP_SORT)}>\n      Heap Sort\n    </NavigationItem>\n    <NavigationItem clicked={reset}>Reset</NavigationItem>\n    <NavigationItem clicked={executeAlgorithm}>\n      Visualize {algorithm}!\n    </NavigationItem>\n  </ul>\n);\nexport default NavigationItems;\n","import React from \"react\";\nimport classes from \"./Toolbar.module.css\";\nimport NavigationItems from \"../NavigationItems/NavigationItems\";\n\nconst toolbar = (props) => {\n  return (\n    <header className={classes.Toolbar}>\n      <nav className={classes.DesktopOnly}>\n        <NavigationItems {...props} />\n      </nav>\n    </header>\n  );\n};\nexport default toolbar;\n","import React from \"react\";\nimport \"./Modal.css\";\nimport Transition from \"react-transition-group/Transition\";\n\nconst animationTiming = {\n  enter: 400,\n  exit: 400,\n};\n\nconst Modal = (props) => {\n  return (\n    <Transition\n      in={props.show}\n      timeout={animationTiming}\n      mountOnEnter\n      unmountOnExit\n    >\n      {(state) => {\n        const classes = [\n          \"Modal\",\n          state === \"entering\"\n            ? \"ModalOpen\"\n            : state === \"exiting\"\n            ? \"ModalClosed\"\n            : null,\n        ];\n        return (\n          <div className={classes.join(\" \")}>\n            <h1>Welcome to The Sorting Visualizer!</h1>\n            <h4>\n              This Project Helps CS Enthusiasts visualize popular sorting\n              algorithms. To get Started, click on a sorting algorithm located\n              in the header and press GO.\n            </h4>\n            <button onClick={props.clicked}>Dismiss</button>\n          </div>\n        );\n      }}\n    </Transition>\n  );\n};\nexport default Modal;\n","import React from \"react\";\nimport \"./Backdrop.css\";\n\nconst backdrop = (props) => {\n  const cssClasses = [\n    \"Backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n  return <div className={cssClasses.join(\" \")}></div>;\n};\n\nexport default backdrop;\n","import classes from \"./App.module.css\";\nimport withClass from \"./components/hoc/withClass\"\nimport SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\";\nexport default withClass(SortingVisualizer, classes.Container);\n","import React, { useState, useEffect } from \"react\";\nimport Col from \"../Col/Col\";\nimport * as animations from \"../../animations\";\nimport * as cts from \"../../utility\";\nimport { generateRandomArray } from \"../../utility\";\nimport Toolbar from \"../../components/Navigation/Toolbar/Toolbar\";\nimport Modal from \"../../UI/Modal/Modal\";\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\nimport styles from \"./SortingVisualizer.module.css\";\n\nconst SortingVisualizer = () => {\n  const [showModal, setShowModal] = useState(true);\n  const [algorithm, setAlgorithm] = useState(cts.QUICK_SORT);\n  const [array, setArray] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const onResetHandler = () => {\n    const array = generateRandomArray(cts.NUMBER_COLUMNS);\n    if (!isDisabled) {\n      setArray(array);\n      setIsSorted(false);\n      setIsDisabled(false);\n    }\n  };\n\n  useEffect(() => {\n    onResetHandler();\n  }, []);\n\n  const toggleShowModal = () => {\n    const prevModal = showModal;\n    setShowModal(!prevModal);\n  };\n\n  const executeAlgorithm = () => {\n    if (isSorted) {\n      onResetHandler();\n    }\n    if (!isDisabled) {\n      setIsSorted(true);\n      setIsDisabled(true);\n\n      switch (algorithm) {\n        case cts.BUBBLE_SORT:\n          animations.bubbleSortAnimation(array, setIsDisabled);\n          break;\n        case cts.MERGE_SORT:\n          animations.mergeSortAnimation(array, setIsDisabled);\n          break;\n        case cts.QUICK_SORT:\n          animations.quickSortAnimation(array, setIsDisabled);\n          break;\n        case cts.HEAP_SORT:\n          animations.mergeSortAnimation(array, setIsDisabled);\n          break;\n        case cts.INSERTION_SORT:\n          animations.insertionSortAnimation(array, setIsDisabled);\n          break;\n        default:\n          animations.quickSortAnimation(array, setIsDisabled);\n          break;\n      }\n    }\n  };\n\n  let Columns = array.map((value, key) => <Col key={key} height={value} />);\n\n  return (\n    <>\n      <Toolbar\n        toggleShowModal={toggleShowModal}\n        executeAlgorithm={executeAlgorithm}\n        setAlgorithm={setAlgorithm}\n        reset={onResetHandler}\n        algorithm={algorithm}\n      />\n      <div className={styles.ColumnContainer}>{Columns}</div>\n      {showModal ? <Backdrop show={showModal} /> : null}\n      {showModal ? <Modal clicked={toggleShowModal} show={showModal} /> : null}\n    </>\n  );\n};\n\nexport default SortingVisualizer;\n","export * from \"./constants\"\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max)) + 1;\n};\nexport const generateRandomArray = (length) => {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array[i] = getRandomInt(220) * 2.5;\n  }\n  return array;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}